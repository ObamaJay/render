import os
import re
import json
import uuid
import datetime
import tempfile
import traceback

import requests
import stripe
from flask import Flask, request, jsonify
from supabase import create_client
from fpdf import FPDF

# ---------------- Flask app ----------------
app = Flask(__name__)

# ---------------- Environment ----------------
STRIPE_SECRET_KEY = os.getenv("STRIPE_SECRET_KEY", "")
STRIPE_WEBHOOK_SECRET = os.getenv("STRIPE_WEBHOOK_SECRET", "")

SUPABASE_URL = os.getenv("SUPABASE_URL", "")
SUPABASE_SERVICE_ROLE_KEY = os.getenv("SUPABASE_SERVICE_ROLE_KEY", "")

RESEND_API_KEY = os.getenv("RESEND_API_KEY", "")
FROM_EMAIL = os.getenv("FROM_EMAIL", "onboarding@resend.dev")
FROM_NAME = os.getenv("FROM_NAME", "ImmigrAI")
REPLY_TO = os.getenv("REPLY_TO", "support@immigrai.org")

TABLE_NAME = os.getenv("TABLE_NAME", "leads")
BUCKET = os.getenv("BUCKET", "casefiles")

# GA4 (Measurement Protocol) — server-side events
GA4_MEASUREMENT_ID = os.getenv("GA4_MEASUREMENT_ID", "")
GA4_API_SECRET = os.getenv("GA4_API_SECRET", "")

# ---------------- Clients ----------------
stripe.api_key = STRIPE_SECRET_KEY
supabase = create_client(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY)

# ---------------- Text helpers ----------------
CTRL_RE = re.compile(r"[\x00-\x08\x0B\x0C\x0E-\x1F]")

def strip_non_latin1(text: str) -> str:
    return (text or "").encode("latin1", "ignore").decode("latin1")

def normalize_spaces(s: str) -> str:
    s = (s or "").replace("\xa0", " ").replace("\t", " ")
    s = CTRL_RE.sub("", s)
    s = re.sub(r"([-–—_])\1{9,}", lambda m: " ".join([m.group(1)*10] * (len(m.group(0)) // 10 + 1)), s)
    return s

def soften_long_tokens(s: str, max_len: int = 40) -> str:
    def chunker(w: str) -> str:
        return " ".join(w[i:i + max_len] for i in range(0, len(w), max_len))
    s = re.sub(r"(https?://\S+)", lambda m: chunker(m.group(0)), s)
    return re.sub(r"\S{" + str(max_len) + r",}", lambda m: chunker(m.group(0)), s)

def sanitize_text(text: str) -> str:
    text = (text or "")
    text = (text
            .replace("–", "-").replace("—", "-").replace("-", "-")
            .replace("“", '"').replace("”", '"')
            .replace("‘", "'").replace("’", "'"))
    t = strip_non_latin1(text)
    t = normalize_spaces(t)
    t = soften_long_tokens(t, max_len=40)
    return t

# ---------------- PDF subclass with footer ----------------
class PDF(FPDF):
    def footer(self):
        self.set_y(-15)
        self.set_font("Arial", "", 9)
        self.set_text_color(120)
        footer_text = getattr(self, "footer_text",
                              "Generated by ImmigrAI.org - Not affiliated with USCIS or the U.S. government.")
        self.cell(0, 6, f"Page {self.page_no()}/{{nb}} · {footer_text}", 0, 0, "C")
        self.set_text_color(0)

# ---------------- PDF helpers ----------------
def add_cover_page(pdf: PDF, visa_type: str, petitioner: str, beneficiary: str):
    pdf.add_page()
    pdf.set_margins(left=15, top=18, right=15)
    pdf.set_auto_page_break(auto=True, margin=15)

    pdf.set_font("Arial", "B", 18)
    pdf.cell(0, 12, sanitize_text("ImmigrAI - USCIS Case Checklist"), ln=1, align="C")

    pdf.set_font("Arial", "", 12)
    pdf.ln(6)
    pdf.cell(0, 8, f"Visa Type: {sanitize_text(visa_type or 'N/A')}", ln=1, align="C")
    pdf.cell(0, 8, f"Petitioner: {sanitize_text(petitioner or 'N/A')}", ln=1, align="C")
    if beneficiary:
        pdf.cell(0, 8, f"Beneficiary: {sanitize_text(beneficiary)}", ln=1, align="C")

    pdf.ln(10)
    pdf.set_font("Arial", "", 10)
    pdf.multi_cell(0, 6,
        "This checklist was generated using publicly available USCIS guidance. "
        "It is intended for informational purposes only and does not constitute legal advice."
    )

def safe_multicell(pdf: PDF, line: str, line_height: float, avail_w: float):
    try:
        pdf.set_x(pdf.l_margin)
        pdf.multi_cell(w=avail_w, h=line_height, txt=line)
    except Exception:
        chunk = 60
        i = 0
        while i < len(line):
            piece = line[i:i+chunk]
            pdf.set_x(pdf.l_margin)
            pdf.cell(w=avail_w, h=line_height, txt=piece, ln=1)
            i += chunk

def add_checklist_body(pdf: PDF, raw_text: str):
    safe_text = sanitize_text(raw_text)
    pdf.add_page()
    pdf.set_margins(left=15, top=15, right=15)
    pdf.set_auto_page_break(auto=True, margin=15)

    pdf.set_font("Arial", "B", 14)
    pdf.cell(0, 10, "Detailed Checklist", ln=1)
    pdf.ln(2)

    pdf.set_font("Arial", "", 10)
    avail_w = pdf.w - pdf.l_margin - pdf.r_margin
    line_h = 6.5
    for raw_line in safe_text.splitlines():
        line = sanitize_text(raw_line)
        safe_multicell(pdf, line, line_h, avail_w)

def generate_pdf(text: str, visa_type: str, petitioner: str, beneficiary: str) -> str:
    pdf = PDF()
    pdf.alias_nb_pages()
    pdf.footer_text = sanitize_text(
        "Generated by ImmigrAI.org - Not affiliated with USCIS or the U.S. government."
    )
    add_cover_page(pdf, visa_type, petitioner, beneficiary)
    add_checklist_body(pdf, text)
    tmp = tempfile.NamedTemporaryFile(delete=False, suffix=".pdf")
    pdf.output(tmp.name)
    return tmp.name

# ---------------- Storage + Email ----------------
def upload_to_supabase(local_path: str, visa_type: str) -> tuple[str, str]:
    ts = datetime.datetime.utcnow().strftime("%Y%m%d%H%M%S")
    object_name = f"{sanitize_text(visa_type or 'Checklist')}_{ts}.pdf"
    with open(local_path, "rb") as f:
        supabase.storage.from_(BUCKET).upload(object_name, f, {"content-type": "application/pdf"})
    signed = supabase.storage.from_(BUCKET).create_signed_url(object_name, 86400)
    return object_name, signed.get("signedURL", "") or signed.get("signed_url", "")

def build_email_html(download_link: str, visa_type: str) -> str:
    return f"""
    <div style="font-family:Inter,Arial,sans-serif;line-height:1.6;">
      <h2>Your USCIS Checklist is Ready - {sanitize_text(visa_type)}</h2>
      <p>Hi there,</p>
      <p>Your personalized checklist is ready. Click below to download:</p>
      <p style="margin:24px 0;">
        <a href="{download_link}" style="background:#0ea5e9;color:#fff;text-decoration:none;
           padding:12px 18px;border-radius:8px;display:inline-block;">Download checklist</a>
      </p>
      <p>This secure link expires in 24 hours. If it expires, just regenerate in the app.</p>
      <hr style="border:none;border-top:1px solid #eee;margin:24px 0;">
      <p style="color:#666;font-size:12px;">
        ImmigrAI is not a law firm and is not affiliated with USCIS.
      </p>
    </div>
    """

def build_email_text(download_link: str, visa_type: str) -> str:
    return (
        f"Your USCIS Checklist is Ready - {sanitize_text(visa_type)}\n\n"
        f"Download here: {download_link}\n\n"
        "This checklist is based on the latest USCIS requirements.\n"
        "Need help? Reply to this email.\n"
        "100% Money-Back Guarantee if you’re not satisfied.\n\n"
        "ImmigrAI.org - Not affiliated with USCIS."
    )

def send_resend_email(to_email: str, petitioner: str, visa_type: str, signed_url: str) -> tuple[int, str]:
    html = build_email_html(signed_url, visa_type)
    text = build_email_text(signed_url, visa_type)
    payload = {
        "from": f"{FROM_NAME} <{FROM_EMAIL}>",
        "to": to_email,
        "subject": f"Your USCIS Checklist is Ready - {sanitize_text(visa_type)}",
        "html": html,
        "text": text,
        "reply_to": [REPLY_TO],
        "tags": [{"name": "type", "value": "checklist_ready"}],
    }
    r = requests.post(
        "https://api.resend.com/emails",
        headers={"Authorization": f"Bearer {RESEND_API_KEY}", "Content-Type": "application/json"},
        json=payload,
        timeout=20,
    )
    return r.status_code, r.text

# ---------------- GA4 server-side event ----------------
def ga4_event_checkout_completed(email: str, amount_cents: int, client_ref: str = ""):
    """Send checkout_completed to GA4 via Measurement Protocol from the webhook."""
    if not (GA4_MEASUREMENT_ID and GA4_API_SECRET):
        return
    body = {
        "client_id": client_ref or str(uuid.uuid4()),  # GA requires a client_id
        "events": [{
            "name": "checkout_completed",
            "params": {
                "currency": "USD",
                "value": round((amount_cents or 0) / 100.0, 2),
                "method": "stripe_webhook",
                "email": email or "unknown"
            }
        }]
    }
    try:
        requests.post(
            f"https://www.google-analytics.com/mp/collect?measurement_id={GA4_MEASUREMENT_ID}&api_secret={GA4_API_SECRET}",
            headers={"Content-Type": "application/json"},
            data=json.dumps(body),
            timeout=8
        )
    except Exception as e:
        print("⚠️ GA4 webhook event failed:", repr(e))

# ---------------- Health routes ----------------
@app.get("/")
def root():
    return "✅ ImmigrAI webhook running", 200

@app.get("/webhook")
def webhook_info():
    return "Stripe webhook endpoint is alive. Send POST events from Stripe.", 200

# ---------------- Stripe webhook ----------------
@app.post("/webhook")
def stripe_webhook():
    missing = [k for k, v in {
        "STRIPE_SECRET_KEY": STRIPE_SECRET_KEY,
        "STRIPE_WEBHOOK_SECRET": STRIPE_WEBHOOK_SECRET,
        "SUPABASE_URL": SUPABASE_URL,
        "SUPABASE_SERVICE_ROLE_KEY": SUPABASE_SERVICE_ROLE_KEY,
        "RESEND_API_KEY": RESEND_API_KEY,
    }.items() if not v]
    if missing:
        print("❌ Missing env vars:", ", ".join(missing))
        return jsonify({"error": "missing_env", "details": missing}), 200

    payload = request.data
    sig = request.headers.get("Stripe-Signature", "")

    try:
        event = stripe.Webhook.construct_event(payload, sig, STRIPE_WEBHOOK_SECRET)
    except Exception as e:
        print("❌ Signature verification failed:", e)
        return f"Invalid signature: {e}", 400

    event_type = event.get("type")
    print("✅ Event type:", event_type)

    if event_type != "checkout.session.completed":
        return jsonify({"ignored": event_type}), 200

    pdf_path = None
    try:
        session = event["data"]["object"]
        email = (session.get("customer_details") or {}).get("email") or session.get("customer_email")
        print("Email from Stripe:", email)

        if not email:
            return jsonify({"status": "no_email"}), 200

        # Find most recent lead by email
        q = supabase.table(TABLE_NAME).select("*").eq("email", email).order("created_at", desc=True).limit(1).execute()
        if not q.data:
            return jsonify({"status": "no_matching_lead"}), 200

        lead = q.data[0]
        lead_id = lead.get("id")
        text = lead.get("checklist_text") or ""
        petitioner = lead.get("petitioner_name") or "there"
        beneficiary = lead.get("beneficiary_name") or ""
        visa_type = lead.get("visa_type") or "Checklist"

        print("Generating PDF for visa_type:", visa_type)

        # Generate PDF
        pdf_path = generate_pdf(text, visa_type, petitioner, beneficiary)

        # Upload + signed URL (24h)
        object_name, signed_url = upload_to_supabase(pdf_path, visa_type)
        print("Uploaded object:", object_name)

        # Email user
        status, body = send_resend_email(email, petitioner, visa_type, signed_url)
        print("Resend status:", status, body[:200])

        # Update lead row
        try:
            update_payload = {
                "pdf_object": object_name,
                "emailed_at": datetime.datetime.utcnow().isoformat()
            }
            if lead_id:
                supabase.table(TABLE_NAME).update(update_payload).eq("id", lead_id).execute()
            else:
                supabase.table(TABLE_NAME).update(update_payload).eq("email", email).execute()
        except Exception as e:
            print("⚠️ Could not update lead:", repr(e))

        # Log payment
        amount = int(session.get("amount_total") or 0)  # cents
        currency = (session.get("currency") or "usd").lower()
        sid = session.get("id")
        try:
            supabase.table("payments").insert({
                "email": email, "amount": amount, "currency": currency, "session_id": sid
            }).execute()
        except Exception as e:
            print("⚠️ payment log failed:", repr(e))

        # Fire GA4 server-side conversion (backup to the frontend event)
        client_ref = (session.get("client_reference_id") or "")
        ga4_event_checkout_completed(email=email, amount_cents=amount, client_ref=client_ref)

        return jsonify({"ok": True}), 200

    except Exception as e:
        print("💥 Handler error:", repr(e))
        traceback.print_exc()
        return jsonify({"error": str(e)}), 200
    finally:
        if pdf_path:
            try:
                os.unlink(pdf_path)
            except Exception:
                pass

# ---------------- Local run ----------------
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
